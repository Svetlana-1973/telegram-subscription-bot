import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env ---
# –ë–æ—Ç –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–∫–µ–Ω, ID –∫–∞–Ω–∞–ª–∞ –∏ —Ç.–¥.) –∏–∑ —Ñ–∞–π–ª–∞ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
CHANNEL_LINK = os.getenv("CHANNEL_LINK") # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
GIFT_URL = os.getenv("GIFT_URL")

if not all([BOT_TOKEN, CHANNEL_ID, CHANNEL_USERNAME, CHANNEL_LINK, GIFT_URL]):
    print("–û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
    exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.is_chat_member()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}: {e}")
        return False # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    user_id = message.from_user.id

    keyboard = InlineKeyboardMarkup()
    button_subscribe = InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK) # –í–µ–¥–µ—Ç –Ω–∞ —Å–ø–µ—Ü. —Å—Å—ã–ª–∫—É
    button_get_gift = InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="get_gift") # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞

    keyboard.add(button_subscribe, button_get_gift)

    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ", reply_markup=keyboard)

@dp.callback_query_handler(text="get_gift")
async def handle_get_gift_button(call: types.CallbackQuery):
    user_id = call.from_user.id

    if await is_subscribed(user_id):
       
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=GIFT_URL)) # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
        await call.message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ", reply_markup=keyboard)
    else:
        await call.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ")

    await call.answer()

async def on_startup(dp):
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫.")

async def on_shutdown(dp):
    print("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è.")

if __name__ == '__main__':
  
    executor.start_webhook(
        dispatcher=dp,
        webhook_path='/', 
        on_startup=on_startup, 
        on_shutdown=on_shutdown, 
        skip_updates=True, 
        host='0.0.0.0',   
        port=int(os.environ.get("PORT", 80)) 
    )
